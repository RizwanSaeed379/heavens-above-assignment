name: Deployment Pipeline

# Trigger: Runs on push to main branch and can be manually triggered
on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create build timestamp
      run: |
        echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
        echo "BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV
    
    - name: Prepare deployment package
      run: |
        mkdir -p deploy-package
        cp -r public deploy-package/
        cp -r node_modules deploy-package/
        cp package*.json deploy-package/
        cp run.js deploy-package/
        echo "Build: ${{ env.BUILD_NUMBER }} - ${{ env.BUILD_TIME }}" > deploy-package/BUILD_INFO.txt
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deploy-package/
        retention-days: 7

  test-deployment:
    name: Test Deployment Package
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Test deployment package
      run: |
        echo "Testing deployment package..."
        node --version
        npm --version
        ls -la
        echo "Deployment package is ready!"

  deploy-github-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: test-deployment
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Prepare GitHub Pages content
      run: |
        mkdir -p _site
        cp -r public/* _site/
        echo "Deployed at $(date)" > _site/DEPLOY_INFO.txt
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '_site'
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  deploy-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [build, test-deployment, deploy-github-pages]
    if: always()
    
    steps:
    - name: Generate deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Status**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Status**: ${{ needs.test-deployment.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deploy Status**: ${{ needs.deploy-github-pages.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed By**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deploy-github-pages.result }}" == "success" ]; then
          echo "✅ **Deployment Successful!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Deployment Failed!**" >> $GITHUB_STEP_SUMMARY
        fi