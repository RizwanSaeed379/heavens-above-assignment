name: Dependency Updates

on:
  schedule:
    - cron: '0 9 * * 1'  # Every Monday at 9 AM UTC
  workflow_dispatch:
    inputs:
      update-type:
        description: 'Type of dependency updates'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  dependency-check:
    name: Check Dependency Updates
    runs-on: ubuntu-latest
    
    outputs:
      updates-available: ${{ steps.check.outputs.updates }}
      outdated-count: ${{ steps.check.outputs.outdated-count }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check for outdated packages
      id: check
      run: |
        echo "üîç Checking for outdated packages..."
        
        # Get outdated packages in JSON format
        npm outdated --json > outdated.json || echo "{}" > outdated.json
        
        # Count outdated packages
        OUTDATED_COUNT=$(node -e "
          const outdated = require('./outdated.json');
          console.log(Object.keys(outdated).length);
        ")
        
        if [ "$OUTDATED_COUNT" -gt 0 ]; then
          echo "updates=true" >> $GITHUB_OUTPUT
          echo "outdated-count=$OUTDATED_COUNT" >> $GITHUB_OUTPUT
          echo "üì¶ Found $OUTDATED_COUNT outdated package(s)"
          echo "Outdated packages:"
          npm outdated
        else
          echo "updates=false" >> $GITHUB_OUTPUT
          echo "outdated-count=0" >> $GITHUB_OUTPUT
          echo "‚úÖ All packages are up to date!"
        fi
    
    - name: Generate dependency report
      run: |
        echo "## üì¶ Dependency Health Report" > dependency-report.md
        echo "" >> dependency-report.md
        echo "**Generated**: $(date)" >> dependency-report.md
        echo "**Outdated Packages**: ${{ steps.check.outputs.outdated-count }}" >> dependency-report.md
        echo "" >> dependency-report.md
        echo "### Detailed Report" >> dependency-report.md
        echo '```json' >> dependency-report.md
        cat outdated.json >> dependency-report.md
        echo '```' >> dependency-report.md
    
    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-health-report
        path: |
          dependency-report.md
          outdated.json
        retention-days: 30

  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    needs: dependency-check
    if: needs.dependency-check.outputs.updates-available == 'true'
    
    outputs:
      pr-created: ${{ steps.create-pr.outputs.pr-created }}
      pr-url: ${{ steps.create-pr.outputs.pr-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: main
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Create update branch
      run: |
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        BRANCH_NAME="deps/auto-update-$TIMESTAMP"
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        git checkout -b "$BRANCH_NAME"
    
    - name: Update dependencies based on type
      id: update
      run: |
        UPDATE_TYPE="${{ github.event.inputs.update-type || 'patch' }}"
        echo "Updating $UPDATE_TYPE versions..."
        
        case "$UPDATE_TYPE" in
          "patch")
            npm update
            ;;
          "minor")
            npx npm-check-updates --target minor -u
            ;;
          "major")
            npx npm-check-updates --target major -u
            ;;
        esac
        
        # Install updated dependencies
        npm install
        
        # Check if package files changed
        if git diff --name-only | grep -q "package"; then
          echo "CHANGES_MADE=true" >> $GITHUB_OUTPUT
          echo "Updated files:"
          git diff --name-only
        else
          echo "CHANGES_MADE=false" >> $GITHUB_OUTPUT
          echo "No dependency changes needed"
        fi
    
    - name: Run validation tests
      if: steps.update.outputs.CHANGES_MADE == 'true'
      run: |
        echo "üß™ Running validation tests..."
        # Basic syntax validation
        node -c run.js && echo "‚úÖ Main file syntax valid"
        
        # Install fresh with updated dependencies
        npm ci
        
        # Run any available tests
        if npm run | grep -q "test"; then
          npm test
        else
          echo "‚ÑπÔ∏è No test script found, running basic validation"
          node -e "
            const pkg = require('./package.json');
            console.log('‚úÖ Package validation passed');
            console.log('Dependencies:', Object.keys(pkg.dependencies || {}).length);
            console.log('Dev Dependencies:', Object.keys(pkg.devDependencies || {}).length);
          "
        fi
      continue-on-error: false
    
    - name: Commit and push changes
      if: steps.update.outputs.CHANGES_MADE == 'true'
      run: |
        git add package.json package-lock.json
        git commit -m "chore(deps): update ${{ github.event.inputs.update-type || 'patch' }} versions
        
        Automated dependency updates:
        - Update type: ${{ github.event.inputs.update-type || 'patch' }}
        - Run: ${{ github.run_number }}
        - Date: $(date)
        
        Signed-off-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
        
        git push origin "$BRANCH_NAME"
    
    - name: Create Pull Request
      id: create-pr
      if: steps.update.outputs.CHANGES_MADE == 'true'
      uses: repo-sync/pull-request@v2
      with:
        destination_branch: "main"
        github_token: ${{ secrets.GITHUB_TOKEN }}
        pr_title: "üîÑ chore(deps): automated ${{ github.event.inputs.update-type || 'patch' }} dependency updates"
        pr_body: |
          ## Automated Dependency Updates
          
          This pull request contains automated updates to project dependencies.
          
          ### üìä Update Summary
          - **Update Type**: ${{ github.event.inputs.update-type || 'patch' }}
          - **Generated By**: GitHub Actions
          - **Workflow Run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ### üîç Changes Made
          The following files have been updated:
          - `package.json`
          - `package-lock.json`
          
          ### ‚úÖ Validation
          - Basic syntax validation passed
          - Dependency installation successful
          
          ### üìã Review Checklist
          - [ ] Verify the dependency updates are appropriate
          - [ ] Ensure all tests pass
          - [ ] Check for any breaking changes
          - [ ] Merge if everything looks good
          
          ---
          *This PR was automatically generated by the Dependency Updates workflow.*
        pr_label: "dependencies,automated"

  security-audit:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: dependency-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run comprehensive security audit
      run: |
        echo "üîí Running security audit..."
        npm audit --audit-level moderate --json > audit-results.json || echo "{}" > audit-results.json
        
        # Parse audit results
        node -e "
          const audit = require('./audit-results.json');
          const vulnerabilities = audit.metadata?.vulnerabilities || {};
          console.log('Security Summary:');
          console.log('Critical:', vulnerabilities.critical || 0);
          console.log('High:', vulnerabilities.high || 0);
          console.log('Moderate:', vulnerabilities.moderate || 0);
          console.log('Low:', vulnerabilities.low || 0);
        "
    
    - name: Generate security report
      run: |
        echo "## üõ°Ô∏è Security Audit Report" > security-report.md
        echo "" >> security-report.md
        echo "**Scan Date**: $(date)" >> security-report.md
        echo "**Outdated Packages**: ${{ needs.dependency-check.outputs.outdated-count }}" >> security-report.md
        echo "" >> security-report.md
        echo "### Vulnerability Summary" >> security-report.md
        npm audit --audit-level moderate || echo "No critical vulnerabilities found"
    
    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-results
        path: |
          security-report.md
          audit-results.json
        retention-days: 90

  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [dependency-check, update-dependencies, security-audit]
    if: always()
    
    steps:
    - name: Generate comprehensive summary
      run: |
        echo "## üìä Dependency Management Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîç Check Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Dependency Check**: ${{ needs.dependency-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Updates Available**: ${{ needs.dependency-check.outputs.updates-available }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Outdated Packages**: ${{ needs.dependency-check.outputs.outdated-count }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üîÑ Update Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Update Job**: ${{ needs.update-dependencies.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **PR Created**: ${{ needs.update-dependencies.outputs.pr-created || 'false' }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.update-dependencies.outputs.pr-url }}" != "" ]; then
          echo "- **PR Link**: [${{ needs.update-dependencies.outputs.pr-url }}](${{ needs.update-dependencies.outputs.pr-url }})" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üõ°Ô∏è Security Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Audit**: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.dependency-check.outputs.updates-available }}" == "true" ]; then
          echo " **Dependency updates processed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "Check the generated PR for review and merging." >> $GITHUB_STEP_SUMMARY
        else
          echo "‚úÖ **All dependencies are current!**" >> $GITHUB_STEP_SUMMARY
          echo "No updates needed at this time." >> $GITHUB_STEP_SUMMARY
        fi