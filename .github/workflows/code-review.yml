name: Code Review Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, master]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: |
        echo "Running ESLint..."
        npx eslint . --ext .js --format json --output-file eslint-report.json 2>/dev/null || echo "ESLint completed"
        npx eslint . --ext .js 2>/dev/null || echo "Linting check completed"
      continue-on-error: true
    
    - name: Generate code quality report
      run: |
        echo "## 📊 Code Quality Report" > code-quality-report.md
        echo "" >> code-quality-report.md
        echo "Generated: $(date)" >> code-quality-report.md
        echo "" >> code-quality-report.md
        echo "### ESLint Results" >> code-quality-report.md
        echo '```' >> code-quality-report.md
        npx eslint . --ext .js 2>/dev/null || echo "Linting completed" >> code-quality-report.md
        echo '```' >> code-quality-report.md
    
    - name: Upload code quality report
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-report
        path: |
          code-quality-report.md
          eslint-report.json
        retention-days: 30

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: |
        echo "Running security audit..."
        npm audit --json > npm-audit.json 2>/dev/null || echo "{}" > npm-audit.json
        npm audit 2>/dev/null || echo "Security audit completed"
      continue-on-error: true
    
    - name: Generate security report
      run: |
        echo "## 🔒 Security Scan Report" > security-scan-report.md
        echo "" >> security-scan-report.md
        echo "Generated: $(date)" >> security-scan-report.md
        echo "" >> security-scan-report.md
        echo "### Vulnerability Summary" >> security-scan-report.md
        npm audit 2>/dev/null || echo "See npm-audit.json for details" >> security-scan-report.md
    
    - name: Upload security scan report
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-report
        path: |
          security-scan-report.md
          npm-audit.json
        retention-days: 30

  code-standards:
    name: Coding Standards Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check file structure
      run: |
        echo "Checking project structure..."
        echo "## 📁 Project Structure Analysis" > structure-report.md
        echo "" >> structure-report.md
        echo "### Directory Structure" >> structure-report.md
        echo '```' >> structure-report.md
        find . -maxdepth 2 -type d -not -path "./node_modules" -not -path "./.git" | sort
        echo '```' >> structure-report.md
    
    - name: Check code formatting
      run: |
        echo "Checking code formatting..."
        find . -name "*.js" -not -path "*/node_modules/*" -exec grep -l "	" {} \; > tabs.txt 2>/dev/null || true
        
        if [ -s tabs.txt ]; then
          echo "⚠️ Files with tabs found (should use spaces):"
          cat tabs.txt
        else
          echo "✅ No tab characters found"
        fi
    
    - name: Check for TODO comments
      run: |
        echo "Scanning for TODO comments..."
        grep -r "TODO\|FIXME\|HACK" --include="*.js" . 2>/dev/null || echo "No TODO comments found"
    
    - name: Upload structure report
      uses: actions/upload-artifact@v4
      with:
        name: structure-report
        path: structure-report.md
        retention-days: 30

  complexity-analysis:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Analyze code complexity
      run: |
        echo "Analyzing code complexity..."
        echo "## 📈 Code Complexity Report" > complexity-summary.md
        echo "" >> complexity-summary.md
        echo "### Complexity Metrics" >> complexity-summary.md
        echo "- **Files analyzed**: $(find . -name '*.js' -not -path '*/node_modules/*' | wc -l)" >> complexity-summary.md
        echo "- **Analysis date**: $(date)" >> complexity-summary.md
        echo "" >> complexity-summary.md
        echo "### Large Files (>100 lines)" >> complexity-summary.md
        echo '```' >> complexity-summary.md
        find . -name "*.js" -not -path "*/node_modules/*" -exec wc -l {} \; | sort -nr | head -10
        echo '```' >> complexity-summary.md
      continue-on-error: true
    
    - name: Upload complexity report
      uses: actions/upload-artifact@v4
      with:
        name: complexity-analysis
        path: complexity-summary.md
        retention-days: 30

  pr-review-summary:
    name: PR Review Summary
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, code-standards, complexity-analysis]
    if: always()
    
    steps:
    - name: Generate PR review summary
      run: |
        echo "## 🔍 Code Review Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Standards**: ${{ needs.code-standards.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Complexity Analysis**: ${{ needs.complexity-analysis.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### ✅ Review Checklist" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Code follows project conventions" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] No security vulnerabilities introduced" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Dependencies are properly managed" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Code complexity is reasonable" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] No sensitive data exposed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.code-quality.result }}" == "success" ] && [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "🎉 **Code review checks passed!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The code meets quality and security standards." >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Some checks require attention**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please review the detailed reports above." >> $GITHUB_STEP_SUMMARY
        fi