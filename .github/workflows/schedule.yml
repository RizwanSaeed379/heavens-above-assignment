name: Scheduled Maintenance Tasks

# Trigger: Runs daily at 2 AM UTC and can be manually triggered
on:
  schedule:
    # Runs every day at 2:00 AM UTC (cron format: minute hour day month day-of-week)
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allows manual triggering

jobs:
  data-scraping:
    name: Scrape Satellite Data
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run data scraping
      run: |
        echo "Starting data scraping at $(date)"
        timeout 300s node run.js || echo "Scraping completed or timed out"
        echo "Scraping finished at $(date)"
    
    - name: Check scraped data
      run: |
        echo "Checking scraped data..."
        if [ -d "public/data" ]; then
          echo "Data directory exists"
          ls -lh public/data/
          find public/data -type f -name "*.json" -o -name "*.html"
        else
          echo "Warning: Data directory not found"
        fi
    
    - name: Upload scraped data
      uses: actions/upload-artifact@v4
      with:
        name: scraped-data-${{ github.run_number }}
        path: public/data/
        retention-days: 30
      if: always()

  backup:
    name: Data Backup
    runs-on: ubuntu-latest
    needs: data-scraping
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download scraped data
      uses: actions/download-artifact@v4
      with:
        name: scraped-data-${{ github.run_number }}
        path: public/data/
      continue-on-error: true
    
    - name: Create backup
      run: |
        BACKUP_DATE=$(date +%Y%m%d_%H%M%S)
        BACKUP_DIR="backups/backup_${BACKUP_DATE}"
        mkdir -p ${BACKUP_DIR}
        
        echo "Creating backup..."
        if [ -d "public/data" ]; then
          cp -r public/data ${BACKUP_DIR}/
          echo "Backup created at ${BACKUP_DIR}"
        fi
        
        # Create backup metadata
        echo "Backup Date: $(date)" > ${BACKUP_DIR}/backup_info.txt
        echo "Commit: ${{ github.sha }}" >> ${BACKUP_DIR}/backup_info.txt
        echo "Run Number: ${{ github.run_number }}" >> ${BACKUP_DIR}/backup_info.txt
    
    - name: Upload backup
      uses: actions/upload-artifact@v4
      with:
        name: backup-${{ github.run_number }}
        path: backups/
        retention-days: 90

  cleanup:
    name: Cleanup Old Data
    runs-on: ubuntu-latest
    needs: backup
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Clean temporary files
      run: |
        echo "Cleaning temporary files..."
        find . -type f -name "*.tmp" -delete || true
        find . -type f -name "*.log" -mtime +7 -delete || true
        echo "Cleanup completed"
    
    - name: Generate cleanup report
      run: |
        echo "## 🧹 Cleanup Report" > cleanup-report.md
        echo "" >> cleanup-report.md
        echo "- Cleanup Date: $(date)" >> cleanup-report.md
        echo "- Temporary files removed" >> cleanup-report.md
        echo "- Old logs (>7 days) removed" >> cleanup-report.md
    
    - name: Upload cleanup report
      uses: actions/upload-artifact@v4
      with:
        name: cleanup-report
        path: cleanup-report.md
        retention-days: 30

  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    needs: [data-scraping, backup, cleanup]
    if: always()
    
    steps:
    - name: Check job statuses
      run: |
        echo "## 🏥 Health Check Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Data Scraping**: ${{ needs.data-scraping.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Backup**: ${{ needs.backup.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Cleanup**: ${{ needs.cleanup.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Execution Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
    
    - name: Send notification
      run: |
        if [ "${{ needs.data-scraping.result }}" == "success" ]; then
          echo "✅ Scheduled tasks completed successfully!"
        else
          echo "⚠️ Some tasks encountered issues"
        fi

  weekly-maintenance:
    name: Weekly Maintenance
    runs-on: ubuntu-latest
    # Only runs on Sundays at 3 AM UTC
    if: github.event.schedule == '0 3 * * 0' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Deep cleanup
      run: |
        echo "Running weekly deep maintenance..."
        npm cache clean --force
        echo "Weekly maintenance completed"
    
    - name: Generate maintenance report
      run: |
        echo "Weekly Maintenance Report - $(date)" > weekly-report.txt
        echo "NPM cache cleaned" >> weekly-report.txt
        echo "System optimized" >> weekly-report.txt
    
    - name: Upload report
      uses: actions/upload-artifact@v4
      with:
        name: weekly-maintenance-report
        path: weekly-report.txt
        retention-days: 90